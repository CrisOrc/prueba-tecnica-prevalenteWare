import { prisma } from "@/lib/prisma";
import { Movement } from "@prisma/client"; // Types generated by Prisma
import { CreateMovementArgs, GraphQLContext } from "./resolvers.types";

/**
 * GraphQL resolvers for handling queries and mutations.
 */
export const resolvers = {
  Query: {
    /**
     * Resolver to get all movements.
     * Requires authentication.
     *
     * @param {unknown} _parent - The parent resolver.
     * @param {unknown} _args - The arguments for the resolver.
     * @param {GraphQLContext} context - The context containing the session.
     * @returns {Promise<Movement[]>} The list of movements.
     * @throws {Error} If the user is not authenticated.
     */
    movements: async (
      _parent: unknown,
      _args: unknown,
      context: GraphQLContext,
    ): Promise<Movement[]> => {
      if (!context.session) {
        throw new Error("Not authenticated");
      }
      // Example: any logged-in user can see all movements
      return prisma.movement.findMany();
    },

    /**
     * Resolver to get all users.
     * Requires ADMIN role.
     *
     * @param {unknown} _parent - The parent resolver.
     * @param {unknown} _args - The arguments for the resolver.
     * @param {GraphQLContext} context - The context containing the session.
     * @returns {Promise<User[]>} The list of users.
     * @throws {Error} If the user is not authenticated or not an admin.
     */
    users: async (
      _parent: unknown,
      _args: unknown,
      context: GraphQLContext,
    ) => {
      if (!context.session) {
        throw new Error("Not authenticated");
      }
      if (context.session.user.role !== "ADMIN") {
        throw new Error("Access denied. ADMIN role required.");
      }
      return prisma.user.findMany();
    },
  },

  Mutation: {
    /**
     * Resolver to create a new movement.
     * Requires ADMIN role.
     *
     * @param {unknown} _parent - The parent resolver.
     * @param {CreateMovementArgs} args - The arguments for creating a movement.
     * @param {GraphQLContext} context - The context containing the session.
     * @returns {Promise<Movement>} The created movement.
     * @throws {Error} If the user is not authenticated or not an admin.
     */
    createMovement: async (
      _parent: unknown,
      args: CreateMovementArgs,
      context: GraphQLContext,
    ): Promise<Movement> => {
      if (!context.session) {
        throw new Error("Not authenticated");
      }

      if (context.session.user.role !== "ADMIN") {
        throw new Error("Only an ADMIN can create movements");
      }

      // Create a movement associated with the logged-in user:
      const userId = context.session.user.id;
      return prisma.movement.create({
        data: {
          concept: args.concept,
          amount: args.amount,
          date: new Date(),
          userId,
        },
      });
    },
  },

  // Field resolver: Movement -> user
  Movement: {
    /**
     * Resolver to get the user associated with a movement.
     *
     * @param {Movement} parent - The current movement.
     * @returns {Promise<User | null>} The associated user.
     */
    user: async (parent: Movement) => {
      // Find the associated user
      return prisma.user.findUnique({
        where: { id: parent.userId },
      });
    },
  },

  // Field resolver: User -> movements
  User: {
    /**
     * Resolver to get the movements associated with a user.
     *
     * @param {Object} parent - The current user.
     * @param {string} parent.id - The ID of the user.
     * @returns {Promise<Movement[]>} The list of movements associated with the user.
     */
    movements: async (parent: { id: string }) => {
      return prisma.movement.findMany({
        where: { userId: parent.id },
      });
    },
  },
};
